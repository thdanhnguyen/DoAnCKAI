let cities = ["H√† N·ªôi", "H·∫£i Ph√≤ng", "ƒê√† N·∫µng", "Hu·∫ø", "TP.HCM", "C·∫ßn Th∆°", "Nha Trang", "ƒê√† L·∫°t"]
let cityCoords = {
  "H√† N·ªôi": [105.8, 21.0],
  "H·∫£i Ph√≤ng": [106.7, 20.8],
  "ƒê√† N·∫µng": [108.2, 16.0],
  Hu·∫ø: [107.6, 16.5],
  "TP.HCM": [106.7, 10.8],
  "C·∫ßn Th∆°": [105.8, 10.0],
  "Nha Trang": [109.2, 12.2],
  "ƒê√† L·∫°t": [108.4, 11.9],
}

let results = {}
let currentTab = "default"

function switchTab(tabName) {
  currentTab = tabName

  // Update tab buttons
  document.querySelectorAll(".tab").forEach((tab) => tab.classList.remove("active"))
  event.target.classList.add("active")

  // Update tab content
  document.querySelectorAll(".tab-content").forEach((content) => content.classList.remove("active"))
  document.getElementById(`tab-${tabName}`).classList.add("active")

  // Update cities list/editor
  if (tabName === "default") {
    updateCitiesList()
  } else if (tabName === "manual") {
    updateCitiesEditor()
  }
}

function updateCitiesList() {
  const citiesList = document.getElementById("citiesList")
  citiesList.innerHTML = cities
    .map((city, i) => `<div class="city-item">${i + 1}. ${city} (${cityCoords[city][0]}, ${cityCoords[city][1]})</div>`)
    .join("")
}

function updateCitiesEditor() {
  const editor = document.getElementById("citiesEditor")
  editor.innerHTML = cities
    .map(
      (city, i) => `
        <div class="city-input-row">
            <input type="text" value="${city}" placeholder="T√™n th√†nh ph·ªë" onchange="updateCity(${i}, 'name', this.value)">
            <input type="number" step="0.1" value="${cityCoords[city][0]}" placeholder="Kinh ƒë·ªô" onchange="updateCity(${i}, 'lon', this.value)">
            <input type="number" step="0.1" value="${cityCoords[city][1]}" placeholder="Vƒ© ƒë·ªô" onchange="updateCity(${i}, 'lat', this.value)">
            <button class="btn-small btn-remove" onclick="removeCity(${i})">üóëÔ∏è</button>
        </div>
    `,
    )
    .join("")
}

function updateCity(index, field, value) {
  const oldName = cities[index]

  if (field === "name") {
    const newName = value.trim()
    if (newName && newName !== oldName) {
      cities[index] = newName
      cityCoords[newName] = cityCoords[oldName]
      delete cityCoords[oldName]
    }
  } else if (field === "lon") {
    cityCoords[oldName][0] = Number.parseFloat(value)
  } else if (field === "lat") {
    cityCoords[oldName][1] = Number.parseFloat(value)
  }

  drawCities()
}

function addCityRow() {
  const newCity = `Th√†nh ph·ªë ${cities.length + 1}`
  cities.push(newCity)
  cityCoords[newCity] = [106.0, 16.0] // Default coordinates
  updateCitiesEditor()
  drawCities()
}

function removeCity(index) {
  if (cities.length <= 3) {
    alert("C·∫ßn √≠t nh·∫•t 3 th√†nh ph·ªë ƒë·ªÉ gi·∫£i b√†i to√°n TSP!")
    return
  }

  const cityName = cities[index]
  cities.splice(index, 1)
  delete cityCoords[cityName]
  updateCitiesEditor()
  drawCities()
}

function handleCSVUpload(event) {
  const file = event.target.files[0]
  if (!file) return

  const reader = new FileReader()
  reader.onload = (e) => {
    try {
      const content = e.target.result
      const lines = content.split("\n").filter((line) => line.trim())

      // Skip header
      const dataLines = lines.slice(1)

      if (dataLines.length < 3) {
        alert("File CSV ph·∫£i c√≥ √≠t nh·∫•t 3 th√†nh ph·ªë!")
        return
      }

      // Parse CSV
      const newCities = []
      const newCoords = {}

      dataLines.forEach((line) => {
        const parts = line.split(",").map((p) => p.trim())
        if (parts.length >= 3) {
          const name = parts[0]
          const lon = Number.parseFloat(parts[1])
          const lat = Number.parseFloat(parts[2])

          if (name && !isNaN(lon) && !isNaN(lat)) {
            newCities.push(name)
            newCoords[name] = [lon, lat]
          }
        }
      })

      if (newCities.length < 3) {
        alert("Kh√¥ng th·ªÉ ƒë·ªçc ƒë·ªß d·ªØ li·ªáu t·ª´ file CSV!")
        return
      }

      // Update data
      cities = newCities
      cityCoords = newCoords

      // Show info
      const csvInfo = document.getElementById("csvInfo")
      csvInfo.style.display = "block"
      csvInfo.innerHTML = `
                <strong style="color: #7fff00;">‚úÖ ƒê√£ t·∫£i file th√†nh c√¥ng!</strong><br>
                üìÅ File: ${file.name}<br>
                üèôÔ∏è S·ªë th√†nh ph·ªë: ${cities.length}
            `

      // Update display
      updateCitiesList()
      drawCities()
    } catch (error) {
      alert("L·ªói khi ƒë·ªçc file CSV: " + error.message)
    }
  }

  reader.readAsText(file)
}

async function solveTSP() {
  if (cities.length < 3) {
    alert("C·∫ßn √≠t nh·∫•t 3 th√†nh ph·ªë ƒë·ªÉ gi·∫£i b√†i to√°n TSP!")
    return
  }

  const solveBtn = document.getElementById("solveBtn")
  const compareBtn = document.getElementById("compareBtn")
  const resultsBox = document.getElementById("resultsBox")
  const loadingIndicator = document.getElementById("loadingIndicator")

  solveBtn.disabled = true
  compareBtn.disabled = true
  loadingIndicator.classList.add("active")
  resultsBox.innerHTML = '<div style="color: #f7d046;">ƒêang gi·∫£i b√†i to√°n...</div>'

  const params = {
    cities: cities,
    coords: cityCoords,
    n_ants: Number.parseInt(document.getElementById("nAnts").value),
    n_iterations: Number.parseInt(document.getElementById("nIterations").value),
    alpha: Number.parseFloat(document.getElementById("alpha").value),
    beta: Number.parseFloat(document.getElementById("beta").value),
    evaporation: Number.parseFloat(document.getElementById("evaporation").value),
    q: Number.parseFloat(document.getElementById("q").value),
  }

  try {
    const response = await fetch("/solve", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(params),
    })

    if (!response.ok) {
      throw new Error("L·ªói khi gi·∫£i b√†i to√°n")
    }

    results = await response.json()

    // Hi·ªÉn th·ªã k·∫øt qu·∫£
    let output = "=".repeat(50) + "\n"
    output += "THU·∫¨T TO√ÅN BACKTRACKING (simpleAI)\n"
    output += "=".repeat(50) + "\n\n"
    output += `Tuy·∫øn ƒë∆∞·ªùng: ${results.backtracking.route.join(" ‚Üí ")} ‚Üí ${results.backtracking.route[0]}\n`
    output += `T·ªïng kho·∫£ng c√°ch: ${results.backtracking.distance.toFixed(2)} km\n`
    output += `Th·ªùi gian: ${results.backtracking.time.toFixed(4)} gi√¢y\n\n`

    output += "=".repeat(50) + "\n"
    output += "THU·∫¨T TO√ÅN ACO (Ant Colony Optimization)\n"
    output += "=".repeat(50) + "\n\n"
    output += `Tuy·∫øn ƒë∆∞·ªùng: ${results.aco.route.join(" ‚Üí ")} ‚Üí ${results.aco.route[0]}\n`
    output += `T·ªïng kho·∫£ng c√°ch: ${results.aco.distance.toFixed(2)} km\n`
    output += `Th·ªùi gian: ${results.aco.time.toFixed(4)} gi√¢y\n\n`

    output += "=".repeat(50) + "\n"
    output += '‚úÖ Ho√†n th√†nh! Nh·∫•n "So s√°nh k·∫øt qu·∫£" ƒë·ªÉ xem chi ti·∫øt.\n'
    output += "=".repeat(50)

    resultsBox.innerHTML = `<pre style="margin: 0; white-space: pre-wrap;">${output}</pre>`

    // V·∫Ω k·∫øt qu·∫£
    drawRoute("backtrackingCanvas", results.backtracking.route, "Backtracking", "#4a9eff")
    drawRoute("acoCanvas", results.aco.route, "ACO", "#ff6b6b")
    drawConvergence(results.aco.convergence)

    compareBtn.disabled = false
  } catch (error) {
    resultsBox.innerHTML = `<div style="color: #ff6b6b;">‚ùå L·ªói: ${error.message}</div>`
  } finally {
    loadingIndicator.classList.remove("active")
    solveBtn.disabled = false
  }
}

// Hi·ªÉn th·ªã so s√°nh
function showComparison() {
  if (!results.backtracking || !results.aco) {
    alert("Vui l√≤ng gi·∫£i b√†i to√°n tr∆∞·ªõc!")
    return
  }

  const bt = results.backtracking
  const aco = results.aco

  const distanceWinner = bt.distance < aco.distance ? "Backtracking" : "ACO"
  const timeWinner = bt.time < aco.time ? "Backtracking" : "ACO"

  let conclusion = ""
  if (bt.distance < aco.distance) {
    conclusion = `‚úÖ Backtracking t√¨m ƒë∆∞·ª£c tuy·∫øn ƒë∆∞·ªùng ng·∫Øn h∆°n (${bt.distance.toFixed(2)} km so v·ªõi ${aco.distance.toFixed(2)} km)\n‚è±Ô∏è Tuy nhi√™n, ACO c√≥ th·ªÉ nhanh h∆°n v·ªõi b√†i to√°n l·ªõn v√† cho k·∫øt qu·∫£ g·∫ßn t·ªëi ∆∞u`
  } else if (aco.distance < bt.distance) {
    conclusion = `‚úÖ ACO t√¨m ƒë∆∞·ª£c tuy·∫øn ƒë∆∞·ªùng ng·∫Øn h∆°n (${aco.distance.toFixed(2)} km so v·ªõi ${bt.distance.toFixed(2)} km)\n‚ö° ACO ph√π h·ª£p h∆°n cho b√†i to√°n TSP v·ªõi nhi·ªÅu th√†nh ph·ªë`
  } else {
    conclusion = "ü§ù C·∫£ hai thu·∫≠t to√°n ƒë·ªÅu t√¨m ƒë∆∞·ª£c tuy·∫øn ƒë∆∞·ªùng c√≥ ƒë·ªô d√†i b·∫±ng nhau"
  }

  const comparisonHTML = `
        <div style="position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0,0,0,0.8); display: flex; align-items: center; justify-content: center; z-index: 1000;" onclick="this.remove()">
            <div style="background: #1a1a1a; border-radius: 16px; padding: 40px; max-width: 900px; width: 90%; border: 1px solid rgba(247, 208, 70, 0.2);" onclick="event.stopPropagation()">
                <h2 style="color: #f7d046; margin-bottom: 30px; text-align: center;">üìä SO S√ÅNH K·∫æT QU·∫¢</h2>
                
                <table class="comparison-table">
                    <thead>
                        <tr>
                            <th>Ti√™u ch√≠</th>
                            <th>Backtracking</th>
                            <th>ACO</th>
                            <th>T·ªët h∆°n</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>Kho·∫£ng c√°ch (km)</td>
                            <td class="${distanceWinner === "Backtracking" ? "winner" : ""}">${bt.distance.toFixed(2)}</td>
                            <td class="${distanceWinner === "ACO" ? "winner" : ""}">${aco.distance.toFixed(2)}</td>
                            <td style="color: #f7d046; font-weight: 600;">${distanceWinner}</td>
                        </tr>
                        <tr>
                            <td>Th·ªùi gian (gi√¢y)</td>
                            <td class="${timeWinner === "Backtracking" ? "winner" : ""}">${bt.time.toFixed(4)}</td>
                            <td class="${timeWinner === "ACO" ? "winner" : ""}">${aco.time.toFixed(4)}</td>
                            <td style="color: #f7d046; font-weight: 600;">${timeWinner}</td>
                        </tr>
                        <tr>
                            <td>S·ªë th√†nh ph·ªë</td>
                            <td>${cities.length}</td>
                            <td>${cities.length}</td>
                            <td style="color: #999;">B·∫±ng nhau</td>
                        </tr>
                    </tbody>
                </table>

                <div style="background: rgba(247, 208, 70, 0.05); border: 1px solid rgba(247, 208, 70, 0.2); border-radius: 8px; padding: 20px; margin-top: 30px;">
                    <h3 style="color: #f7d046; margin-bottom: 12px;">üìù K·∫æT LU·∫¨N</h3>
                    <p style="line-height: 1.8; white-space: pre-line;">${conclusion}</p>
                </div>

                <button class="btn btn-primary" style="margin-top: 30px;" onclick="this.closest('div[style*=fixed]').remove()">
                    ƒê√≥ng
                </button>
            </div>
        </div>
    `

  document.body.insertAdjacentHTML("beforeend", comparisonHTML)
}

// V·∫Ω v·ªã tr√≠ c√°c th√†nh ph·ªë ban ƒë·∫ßu
function drawCities() {
  const canvas = document.getElementById("citiesCanvas")
  const ctx = canvas.getContext("2d")
  const width = (canvas.width = canvas.offsetWidth)
  const height = (canvas.height = canvas.offsetHeight)

  ctx.fillStyle = "#2a2a2a"
  ctx.fillRect(0, 0, width, height)

  // T√≠nh to√°n scale
  const lons = cities.map((c) => cityCoords[c][0])
  const lats = cities.map((c) => cityCoords[c][1])
  const minLon = Math.min(...lons)
  const maxLon = Math.max(...lons)
  const minLat = Math.min(...lats)
  const maxLat = Math.max(...lats)

  const padding = 60
  const scaleX = (width - 2 * padding) / (maxLon - minLon)
  const scaleY = (height - 2 * padding) / (maxLat - minLat)

  // V·∫Ω c√°c th√†nh ph·ªë
  cities.forEach((city) => {
    const [lon, lat] = cityCoords[city]
    const x = padding + (lon - minLon) * scaleX
    const y = height - (padding + (lat - minLat) * scaleY)

    // V·∫Ω ƒëi·ªÉm
    ctx.beginPath()
    ctx.arc(x, y, 8, 0, 2 * Math.PI)
    ctx.fillStyle = "#f7d046"
    ctx.fill()
    ctx.strokeStyle = "#fff"
    ctx.lineWidth = 2
    ctx.stroke()

    // V·∫Ω t√™n th√†nh ph·ªë
    ctx.fillStyle = "#fff"
    ctx.font = "bold 11px Arial"
    ctx.fillText(city, x + 12, y + 4)
  })
}

// V·∫Ω tuy·∫øn ƒë∆∞·ªùng
function drawRoute(canvasId, route, title, color = "#f7d046") {
  const canvas = document.getElementById(canvasId)
  const ctx = canvas.getContext("2d")
  const width = (canvas.width = canvas.offsetWidth)
  const height = (canvas.height = canvas.offsetHeight)

  ctx.fillStyle = "#2a2a2a"
  ctx.fillRect(0, 0, width, height)

  if (!route || route.length === 0) {
    ctx.fillStyle = "#666"
    ctx.font = "14px Arial"
    ctx.textAlign = "center"
    ctx.fillText("Ch·ªù k·∫øt qu·∫£...", width / 2, height / 2)
    return
  }

  // T√≠nh to√°n scale
  const lons = cities.map((c) => cityCoords[c][0])
  const lats = cities.map((c) => cityCoords[c][1])
  const minLon = Math.min(...lons)
  const maxLon = Math.max(...lons)
  const minLat = Math.min(...lats)
  const maxLat = Math.max(...lats)

  const padding = 60
  const scaleX = (width - 2 * padding) / (maxLon - minLon)
  const scaleY = (height - 2 * padding) / (maxLat - minLat)

  // V·∫Ω ƒë∆∞·ªùng n·ªëi
  ctx.beginPath()
  route.forEach((city, i) => {
    const [lon, lat] = cityCoords[city]
    const x = padding + (lon - minLon) * scaleX
    const y = height - (padding + (lat - minLat) * scaleY)

    if (i === 0) {
      ctx.moveTo(x, y)
    } else {
      ctx.lineTo(x, y)
    }
  })

  // Quay v·ªÅ ƒëi·ªÉm xu·∫•t ph√°t
  const [lon0, lat0] = cityCoords[route[0]]
  const x0 = padding + (lon0 - minLon) * scaleX
  const y0 = height - (padding + (lat0 - minLat) * scaleY)
  ctx.lineTo(x0, y0)

  ctx.strokeStyle = color
  ctx.lineWidth = 2
  ctx.stroke()

  // V·∫Ω c√°c ƒëi·ªÉm
  route.forEach((city, i) => {
    const [lon, lat] = cityCoords[city]
    const x = padding + (lon - minLon) * scaleX
    const y = height - (padding + (lat - minLat) * scaleY)

    ctx.beginPath()
    ctx.arc(x, y, 6, 0, 2 * Math.PI)
    ctx.fillStyle = color
    ctx.fill()
    ctx.strokeStyle = "#fff"
    ctx.lineWidth = 2
    ctx.stroke()

    // V·∫Ω s·ªë th·ª© t·ª±
    ctx.fillStyle = "#fff"
    ctx.font = "bold 10px Arial"
    ctx.fillText((i + 1).toString(), x + 10, y - 10)
  })
}

// V·∫Ω bi·ªÉu ƒë·ªì h·ªôi t·ª•
function drawConvergence(convergenceData) {
  const canvas = document.getElementById("convergenceCanvas")
  const ctx = canvas.getContext("2d")
  const width = (canvas.width = canvas.offsetWidth)
  const height = (canvas.height = canvas.offsetHeight)

  ctx.fillStyle = "#2a2a2a"
  ctx.fillRect(0, 0, width, height)

  if (!convergenceData || convergenceData.length === 0) {
    ctx.fillStyle = "#666"
    ctx.font = "14px Arial"
    ctx.textAlign = "center"
    ctx.fillText("Ch·ªù k·∫øt qu·∫£...", width / 2, height / 2)
    return
  }

  const padding = 50
  const graphWidth = width - 2 * padding
  const graphHeight = height - 2 * padding

  const maxValue = Math.max(...convergenceData)
  const minValue = Math.min(...convergenceData)
  const valueRange = maxValue - minValue

  // V·∫Ω tr·ª•c
  ctx.strokeStyle = "#666"
  ctx.lineWidth = 1
  ctx.beginPath()
  ctx.moveTo(padding, padding)
  ctx.lineTo(padding, height - padding)
  ctx.lineTo(width - padding, height - padding)
  ctx.stroke()

  // V·∫Ω ƒë∆∞·ªùng h·ªôi t·ª•
  ctx.beginPath()
  convergenceData.forEach((value, i) => {
    const x = padding + (i / (convergenceData.length - 1)) * graphWidth
    const y = height - padding - ((value - minValue) / valueRange) * graphHeight

    if (i === 0) {
      ctx.moveTo(x, y)
    } else {
      ctx.lineTo(x, y)
    }
  })

  ctx.strokeStyle = "#f7d046"
  ctx.lineWidth = 2
  ctx.stroke()

  // V·∫Ω nh√£n
  ctx.fillStyle = "#fff"
  ctx.font = "11px Arial"
  ctx.fillText("Iteration", width / 2, height - 10)
  ctx.save()
  ctx.translate(15, height / 2)
  ctx.rotate(-Math.PI / 2)
  ctx.fillText("Kho·∫£ng c√°ch (km)", 0, 0)
  ctx.restore()
}

// Kh·ªüi t·∫°o
window.addEventListener("load", () => {
  updateCitiesList()
  drawCities()
  drawRoute("backtrackingCanvas", null, "Backtracking")
  drawRoute("acoCanvas", null, "ACO")
  drawConvergence(null)
})

window.addEventListener("resize", () => {
  drawCities()
  if (results.backtracking) {
    drawRoute("backtrackingCanvas", results.backtracking.route, "Backtracking", "#4a9eff")
  }
  if (results.aco) {
    drawRoute("acoCanvas", results.aco.route, "ACO", "#ff6b6b")
    drawConvergence(results.aco.convergence)
  }
})
